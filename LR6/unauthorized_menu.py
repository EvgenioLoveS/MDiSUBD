from db import connect_db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ db_connection.py

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_all_products():
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.product_id, p.name, p.price, p.brand, c.name AS category
            FROM product p
            JOIN product_category c ON p.product_category_id = c.product_category_id
        """)
        products = cursor.fetchall()
        cursor.close()
        conn.close()
        return products
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
def filter_products_by_price(min_price, max_price):
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.product_id, p.name, p.price, p.brand, c.name AS category
            FROM product p
            JOIN product_category c ON p.product_category_id = c.product_category_id
            WHERE p.price BETWEEN %s AND %s
        """, (min_price, max_price))
        products = cursor.fetchall()
        cursor.close()
        conn.close()
        return products
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def filter_products_by_category(category):
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.product_id, p.name, p.price, p.brand, c.name AS category
            FROM product p
            JOIN product_category c ON p.product_category_id = c.product_category_id
            WHERE c.name = %s
        """, (category,))
        products = cursor.fetchall()
        cursor.close()
        conn.close()
        return products
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
def filter_products_by_rating(min_rating):
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.product_id, p.name, p.price, p.brand, c.name AS category
            FROM product p
            JOIN product_category c ON p.product_category_id = c.product_category_id
            WHERE EXISTS (
                SELECT 1 FROM review r
                WHERE r.product_id = p.product_id
                AND r.rating >= %s
            )
        """, (min_rating,))
        products = cursor.fetchall()
        cursor.close()
        conn.close()
        return products
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
def view_catalog():
    print("\n" + "=" * 50)
    print("                 üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 50)
    products = get_all_products()
    if products:
        for product in products:
            print(f"üÜî ID: {product[0]} | üìú –ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}")
            print(f"üíµ –¶–µ–Ω–∞: {product[2]}$ | üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product[3]} | üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[4]}")
            print("-" * 50)
    else:
        print("‚ùå –í –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    print("=" * 50)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
def filter_products():
    print("\n" + "=" * 50)
    print("               üîé –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 50)
    print("1. –ü–æ —Ü–µ–Ω–µ")
    print("2. –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("3. –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
    print("4. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    print("=" * 50)

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ")

    if choice == '1':
        print("\nüíµ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ:")
        min_price = float(input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: "))
        max_price = float(input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: "))
        print(f"\nüîç –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–æ–π –æ—Ç {min_price} –¥–æ {max_price}:")
        products = filter_products_by_price(min_price, max_price)
        if products:
            for product in products:
                print(f"üÜî ID: {product[0]} | üìú –ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]} - {product[2]}$")
                print(f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product[3]} | üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[4]}")
                print("-" * 50)
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif choice == '2':
        print("\nüóÇÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        category = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ")
        print(f"\nüîç –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
        products = filter_products_by_category(category)
        if products:
            for product in products:
                print(f"üÜî ID: {product[0]} | üìú –ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]} - {product[2]}$")
                print(f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product[3]} | üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[4]}")
                print("-" * 50)
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif choice == '3':
        print("\n‚≠ê –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:")
        min_rating = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: "))
        print(f"\nüîç –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç {min_rating} –∏ –≤—ã—à–µ:")
        products = filter_products_by_rating(min_rating)
        if products:
            for product in products:
                print(f"üÜî ID: {product[0]} | üìú –ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]} - {product[2]}$")
                print(f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {product[3]} | üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[4]}")
                print("-" * 50)
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif choice == '4':
        print("‚Ü© –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç 1 –¥–æ 4.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
def unauthorized_menu():
    while True:
        print("\n" + "=" * 50)
        print("         üõí –ú–µ–Ω—é –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        print("=" * 50)
        print("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        print("2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
        print("3. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("=" * 50)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): ")

        if choice == '1':
            print("\nüîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
            view_catalog()
        elif choice == '2':
            print("\nüîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
            filter_products()
        elif choice == '3':
            print("‚Ü© –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç 1 –¥–æ 3.")

